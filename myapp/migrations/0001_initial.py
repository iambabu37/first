# Generated by Django 5.0.1 on 2024-02-05 06:01

import django.core.validators
import django.db.models.deletion
import myapp.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ADMEProp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bioavailability_score', models.FloatField(blank=True, null=True)),
                ('solubility_class_esol', models.CharField(blank=True, max_length=255, null=True)),
                ('solubility_class_silicos_it', models.CharField(blank=True, max_length=255, null=True)),
                ('blood_brain_barrier_permeation', models.BooleanField(blank=True, null=True)),
                ('gastrointestinal_absorption', models.BooleanField(blank=True, null=True)),
                ('log_kp_skin_permeation', models.FloatField(blank=True, null=True)),
                ('num_pains_structural_alerts', models.IntegerField(blank=True, null=True)),
                ('num_brenk_structural_alerts', models.IntegerField(blank=True, null=True)),
                ('cyp1a2_inhibitor', models.BooleanField(blank=True, null=True)),
                ('cyp2c19_inhibitor', models.BooleanField(blank=True, null=True)),
                ('cyp2c9_inhibitor', models.BooleanField(blank=True, null=True)),
                ('cyp2d6_inhibitor', models.BooleanField(blank=True, null=True)),
                ('cyp3a4_inhibitor', models.BooleanField(blank=True, null=True)),
                ('p_glycoprotein_substrate', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('email', models.CharField(max_length=254, validators=[django.core.validators.EmailValidator(message='Enter a valid email address.')])),
                ('phone_no', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', message='Enter a valid phone number.')])),
                ('message', models.TextField(blank=True, null=True)),
                ('time_of_submit', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DkProp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lipinski_violations', models.IntegerField(blank=True, null=True)),
                ('lipinski_rule', models.IntegerField(blank=True, null=True)),
                ('ghose_violations', models.IntegerField(blank=True, null=True)),
                ('veber_rule', models.CharField(blank=True, max_length=255, null=True)),
                ('ghose_rule', models.CharField(blank=True, max_length=255, null=True)),
                ('gsk_4_400_rule', models.BooleanField(blank=True, null=True)),
                ('pfizer_3_75_rule', models.BooleanField(blank=True, null=True)),
                ('qedw_score', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='McProp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('molecular_weight', models.FloatField(blank=True, null=True)),
                ('log_p', models.FloatField(blank=True, null=True)),
                ('topological_polar_surface_area', models.FloatField(blank=True, null=True)),
                ('num_hydrogen_bond_acceptors', models.IntegerField(blank=True, null=True)),
                ('num_hydrogen_bond_donors', models.IntegerField(blank=True, null=True)),
                ('num_carbon_atoms', models.IntegerField(blank=True, null=True)),
                ('num_heavy_atoms', models.IntegerField(blank=True, null=True)),
                ('num_heteroatoms', models.IntegerField(blank=True, null=True)),
                ('num_nitrogen_atoms', models.IntegerField(blank=True, null=True)),
                ('num_sulfur_atoms', models.IntegerField(blank=True, null=True)),
                ('num_chiral_carbon_atoms', models.IntegerField(blank=True, null=True)),
                ('stereochemical_complexity', models.FloatField(blank=True, null=True)),
                ('num_sp_hybridized_carbon_atoms', models.IntegerField(blank=True, null=True)),
                ('num_sp2_hybridized_carbon_atoms', models.IntegerField(blank=True, null=True)),
                ('num_sp3_hybridized_carbon_atoms', models.IntegerField(blank=True, null=True)),
                ('shape_complexity', models.FloatField(blank=True, null=True)),
                ('num_rotatable_bonds', models.IntegerField(blank=True, null=True)),
                ('num_aliphatic_carbocycles', models.IntegerField(blank=True, null=True)),
                ('num_aliphatic_heterocycles', models.IntegerField(blank=True, null=True)),
                ('num_aliphatic_rings', models.IntegerField(blank=True, null=True)),
                ('num_aromatic_carbocycles', models.IntegerField(blank=True, null=True)),
                ('num_aromatic_heterocycles', models.IntegerField(blank=True, null=True)),
                ('num_aromatic_rings', models.IntegerField(blank=True, null=True)),
                ('total_num_rings', models.IntegerField(blank=True, null=True)),
                ('num_saturated_carbocycles', models.IntegerField(blank=True, null=True)),
                ('num_saturated_heterocycles', models.IntegerField(blank=True, null=True)),
                ('num_saturated_rings', models.IntegerField(blank=True, null=True)),
                ('num_sssr', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Phytochemical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('synonymous_names', models.TextField(blank=True, null=True)),
                ('external_identifiers', models.TextField(blank=True, null=True)),
                ('smiles', models.TextField(blank=True, null=True)),
                ('inchi', models.TextField(blank=True, null=True)),
                ('inchikey', models.TextField(blank=True, null=True)),
                ('deepsmiles', models.TextField(blank=True, null=True)),
                ('functional_groups', models.TextField(blank=True, null=True)),
                ('classyfire_kingdom', models.CharField(blank=True, max_length=255, null=True)),
                ('classyfire_superclass', models.CharField(blank=True, max_length=255, null=True)),
                ('classyfire_class', models.CharField(blank=True, max_length=255, null=True)),
                ('classyfire_subclass', models.CharField(blank=True, max_length=255, null=True)),
                ('np_classifier_biosynthetic_pathway', models.TextField(blank=True, null=True)),
                ('np_classifier_superclass', models.CharField(blank=True, max_length=255, null=True)),
                ('np_classifier_class', models.CharField(blank=True, max_length=255, null=True)),
                ('np_likeness_score', models.FloatField(blank=True, null=True)),
                ('admeproperties', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='myapp.admeprop')),
                ('dkproperties', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='myapp.dkprop')),
                ('mkproperties', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='myapp.mcprop')),
            ],
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('botanical_name', models.CharField(blank=True, max_length=255, null=True)),
                ('family', models.CharField(blank=True, max_length=255, null=True)),
                ('synonyms', models.CharField(blank=True, max_length=255, null=True)),
                ('active_compound', models.CharField(blank=True, max_length=255, null=True)),
                ('related_plant', models.CharField(blank=True, max_length=255, null=True)),
                ('related_diseae', models.CharField(blank=True, max_length=255, null=True)),
                ('plant_image', models.ImageField(blank=True, null=True, upload_to=myapp.models.img_plant)),
                ('description', models.TextField(blank=True, null=True)),
                ('time_of_add_plant', models.DateTimeField(auto_now_add=True)),
                ('phytochemical_value', models.ManyToManyField(to='myapp.phytochemical')),
                ('referenceplant', models.ManyToManyField(to='myapp.reference')),
            ],
        ),
    ]
